[{"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\index.js":"1","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\reportWebVitals.js":"2","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\App.js":"3","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Navbar.js":"4","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Logout.js":"5","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Login.js":"6","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Signup.js":"7","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Home.js":"8","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Profile.js":"9","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Applications.js":"10","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js":"11","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\isAuth.js":"12","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\MessagePopup.js":"13","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Welcome.js":"14","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js":"15","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"16","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\Profile.js":"17","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js":"18","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\apiList.js":"19","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\EmailInput.js":"20","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\PasswordInput.js":"21","E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\index.js":"23","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\reportWebVitals.js":"24","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\App.js":"25","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Logout.js":"26","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Navbar.js":"27","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Welcome.js":"28","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Login.js":"29","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Profile.js":"30","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Signup.js":"31","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Home.js":"32","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Applications.js":"33","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\CreateJobs.js":"34","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\MessagePopup.js":"35","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\Profile.js":"36","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\isAuth.js":"37","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\MyJobs.js":"38","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\JobApplications.js":"39","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\AcceptedApplicants.js":"40","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\apiList.js":"41","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\PasswordInput.js":"42","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\EmailInput.js":"43","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\FileUploadInput.js":"44"},{"size":517,"mtime":1647528150364,"results":"45","hashOfConfig":"46"},{"size":375,"mtime":1647528150366,"results":"47","hashOfConfig":"46"},{"size":3443,"mtime":1647528150358,"results":"48","hashOfConfig":"46"},{"size":2627,"mtime":1647528150361,"results":"49","hashOfConfig":"46"},{"size":509,"mtime":1647528150360,"results":"50","hashOfConfig":"46"},{"size":3691,"mtime":1647528150360,"results":"51","hashOfConfig":"46"},{"size":14812,"mtime":1647528150362,"results":"52","hashOfConfig":"46"},{"size":21741,"mtime":1647528150360,"results":"53","hashOfConfig":"46"},{"size":8836,"mtime":1647528150361,"results":"54","hashOfConfig":"46"},{"size":7626,"mtime":1647528150359,"results":"55","hashOfConfig":"46"},{"size":8403,"mtime":1647528150363,"results":"56","hashOfConfig":"46"},{"size":174,"mtime":1647528150366,"results":"57","hashOfConfig":"46"},{"size":523,"mtime":1647528150365,"results":"58","hashOfConfig":"46"},{"size":775,"mtime":1647528150362,"results":"59","hashOfConfig":"46"},{"size":26561,"mtime":1647528150363,"results":"60","hashOfConfig":"46"},{"size":25164,"mtime":1647528150363,"results":"61","hashOfConfig":"46"},{"size":5201,"mtime":1647528150364,"results":"62","hashOfConfig":"46"},{"size":22988,"mtime":1647528150363,"results":"63","hashOfConfig":"46"},{"size":452,"mtime":1647528150366,"results":"64","hashOfConfig":"46"},{"size":1210,"mtime":1647528150365,"results":"65","hashOfConfig":"46"},{"size":1724,"mtime":1647528150365,"results":"66","hashOfConfig":"46"},{"size":3392,"mtime":1647528150365,"results":"67","hashOfConfig":"46"},{"size":500,"mtime":1647806205000,"results":"68","hashOfConfig":"69"},{"size":362,"mtime":1647806205000,"results":"70","hashOfConfig":"69"},{"size":3332,"mtime":1647806205000,"results":"71","hashOfConfig":"69"},{"size":489,"mtime":1647806205000,"results":"72","hashOfConfig":"69"},{"size":2532,"mtime":1647806205000,"results":"73","hashOfConfig":"69"},{"size":738,"mtime":1647806205000,"results":"74","hashOfConfig":"69"},{"size":3542,"mtime":1647806205000,"results":"75","hashOfConfig":"69"},{"size":8518,"mtime":1647806205000,"results":"76","hashOfConfig":"69"},{"size":14295,"mtime":1647806205000,"results":"77","hashOfConfig":"69"},{"size":21025,"mtime":1647806205000,"results":"78","hashOfConfig":"69"},{"size":7337,"mtime":1647806205000,"results":"79","hashOfConfig":"69"},{"size":8138,"mtime":1647806205000,"results":"80","hashOfConfig":"69"},{"size":503,"mtime":1647806205000,"results":"81","hashOfConfig":"69"},{"size":4999,"mtime":1647806205000,"results":"82","hashOfConfig":"69"},{"size":165,"mtime":1647806205000,"results":"83","hashOfConfig":"69"},{"size":25686,"mtime":1647806205000,"results":"84","hashOfConfig":"69"},{"size":22206,"mtime":1647806205000,"results":"85","hashOfConfig":"69"},{"size":24341,"mtime":1647806205000,"results":"86","hashOfConfig":"69"},{"size":373,"mtime":1647856501804,"results":"87","hashOfConfig":"69"},{"size":1666,"mtime":1647806205000,"results":"88","hashOfConfig":"69"},{"size":1167,"mtime":1647806205000,"results":"89","hashOfConfig":"69"},{"size":3279,"mtime":1647806205000,"results":"90","hashOfConfig":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ndplq0",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"trfc6s",{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"137"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"137"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"137"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"137"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"137"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"137"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"137"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"137"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"137"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"137"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"137"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"137"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"137"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"193"},"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\index.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\reportWebVitals.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\App.js",["194"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Navbar.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Logout.js",["195"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Login.js",["196"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Signup.js",["197","198"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Home.js",["199","200","201","202","203","204","205"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Profile.js",["206","207","208","209","210","211","212"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Applications.js",["213","214","215","216","217","218","219","220","221"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\CreateJobs.js",["222","223"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\isAuth.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\MessagePopup.js",["224"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\Welcome.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\MyJobs.js",["225","226","227","228","229","230"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["231","232","233","234","235","236","237","238","239"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\Profile.js",["240","241","242"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\component\\recruiter\\JobApplications.js",["243","244","245","246","247","248"],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\apiList.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\EmailInput.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\PasswordInput.js",[],"E:\\MERN STACK PROJECT\\job portal\\job-portal\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\index.js",[],["249","250"],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\reportWebVitals.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\App.js",["251"],"import { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\nimport Navbar from \"./component/Navbar\";\nimport Login from \"./component/Login\";\nimport Logout from \"./component/Logout\";\nimport Signup from \"./component/Signup\";\nimport Home from \"./component/Home\";\nimport Applications from \"./component/Applications\";\nimport Profile from \"./component/Profile\";\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\nimport MyJobs from \"./component/recruiter/MyJobs\";\nimport JobApplications from \"./component/recruiter/JobApplications\";\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\nimport RecruiterProfile from \"./component/recruiter/Profile\";\nimport MessagePopup from \"./lib/MessagePopup\";\nimport isAuth, { userType } from \"./lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"98vh\",\n    paddingTop: \"64px\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n}));\n\nexport const SetPopupContext = createContext();\n\nfunction App() {\n  const classes = useStyles();\n  const [popup, setPopup] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  return (\n    <BrowserRouter>\n      <SetPopupContext.Provider value={setPopup}>\n        <Grid container direction=\"column\">\n          <Grid item xs>\n            <Navbar />\n          </Grid>\n          <Grid item className={classes.body}>\n            <Switch>\n              <Route exact path=\"/\">\n                <Welcome />\n              </Route>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup />\n              </Route>\n              <Route exact path=\"/logout\">\n                <Logout />\n              </Route>\n              <Route exact path=\"/home\">\n                <Home />\n              </Route>\n              <Route exact path=\"/applications\">\n                <Applications />\n              </Route>\n              <Route exact path=\"/profile\">\n                {userType() === \"recruiter\" ? (\n                  <RecruiterProfile />\n                ) : (\n                  <Profile />\n                )}\n              </Route>\n              <Route exact path=\"/addjob\">\n                <CreateJobs />\n              </Route>\n              <Route exact path=\"/myjobs\">\n                <MyJobs />\n              </Route>\n              <Route exact path=\"/job/applications/:jobId\">\n                <JobApplications />\n              </Route>\n              <Route exact path=\"/employees\">\n                <AcceptedApplicants />\n              </Route>\n              <Route>\n                <ErrorPage />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n        <MessagePopup\n          open={popup.open}\n          setOpen={(status) =>\n            setPopup({\n              ...popup,\n              open: status,\n            })\n          }\n          severity={popup.severity}\n          message={popup.message}\n        />\n      </SetPopupContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Logout.js",["252"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Navbar.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Welcome.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Login.js",["253"],"import { useContext, useState } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"300px\",\n  },\n  submitButton: {\n    width: \"300px\",\n  },\n}));\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [loginDetails, setLoginDetails] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      error: false,\n      message: \"\",\n    },\n    password: {\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setLoginDetails({\n      ...loginDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\n      return inputErrorHandler[obj].error;\n    });\n    if (verified) {\n      axios\n        .post(apiList.login, loginDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper elevation={3} className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h2\">\n            Login\n          </Typography>\n        </Grid>\n        <Grid item>\n          <EmailInput\n            label=\"Email\"\n            value={loginDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput\n            label=\"Password\"\n            value={loginDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => handleLogin()}\n            className={classes.submitButton}\n          >\n            Login\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Login;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Profile.js",["254","255","256","257","258","259","260"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [userData, setUserData] = useState();\n  const [open, setOpen] = useState(false);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const editDetails = () => {\n    setOpen(true);\n  };\n\n  const handleUpdate = () => {\n    console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                />\n              </Grid>\n              <MultifieldInput\n                education={education}\n                setEducation={setEducation}\n              />\n              <Grid item>\n                <ChipInput\n                  className={classes.inputBox}\n                  label=\"Skills\"\n                  variant=\"outlined\"\n                  helperText=\"Press enter to add skills\"\n                  value={profileDetails.skills}\n                  onAdd={(chip) =>\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: [...profileDetails.skills, chip],\n                    })\n                  }\n                  onDelete={(chip, index) => {\n                    let skills = profileDetails.skills;\n                    skills.splice(index, 1);\n                    setProfileDetails({\n                      ...profileDetails,\n                      skills: skills,\n                    });\n                  }}\n                  fullWidth\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Resume (.pdf)\"\n                  icon={<DescriptionIcon />}\n                  uploadTo={apiList.uploadResume}\n                  handleInput={handleInput}\n                  identifier={\"resume\"}\n                />\n              </Grid>\n              <Grid item>\n                <FileUploadInput\n                  className={classes.inputBox}\n                  label=\"Profile Photo (.jpg/.png)\"\n                  icon={<FaceIcon />}\n                  uploadTo={apiList.uploadProfileImage}\n                  handleInput={handleInput}\n                  identifier={\"profile\"}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n      {/* <Modal open={open} onClose={handleClose} className={classes.popupDialog}> */}\n\n      {/* </Modal> */}\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Signup.js",["261","262"],"import { useState, useContext } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n  MenuItem,\n  Input,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport ChipInput from \"material-ui-chip-input\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"400px\",\n  },\n  submitButton: {\n    width: \"400px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid\n          item\n          container\n          className={classes.inputBox}\n          key={key}\n          style={{ paddingLeft: 0, paddingRight: 0 }}\n        >\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add another institution details\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [signupDetails, setSignupDetails] = useState({\n    type: \"applicant\",\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    password: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    name: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setSignupDetails({\n      ...signupDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        required: true,\n        untouched: false,\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    console.log(education);\n\n    let updatedDetails = {\n      ...signupDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  const handleLoginRecruiter = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    let updatedDetails = {\n      ...signupDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    console.log(updatedDetails);\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper elevation={3} className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography variant=\"h3\" component=\"h2\">\n            Signup\n          </Typography>\n        </Grid>\n        <Grid item>\n          <TextField\n            select\n            label=\"Category\"\n            variant=\"outlined\"\n            className={classes.inputBox}\n            value={signupDetails.type}\n            onChange={(event) => {\n              handleInput(\"type\", event.target.value);\n            }}\n          >\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\n          </TextField>\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"Name\"\n            value={signupDetails.name}\n            onChange={(event) => handleInput(\"name\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.name.error}\n            helperText={inputErrorHandler.name.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"name\", true, \"Name is required\");\n              } else {\n                handleInputError(\"name\", false, \"\");\n              }\n            }}\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item>\n          <EmailInput\n            label=\"Email\"\n            value={signupDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n            required={true}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput\n            label=\"Password\"\n            value={signupDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.password.error}\n            helperText={inputErrorHandler.password.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"password\", true, \"Password is required\");\n              } else {\n                handleInputError(\"password\", false, \"\");\n              }\n            }}\n          />\n        </Grid>\n        {signupDetails.type === \"applicant\" ? (\n          <>\n            <MultifieldInput\n              education={education}\n              setEducation={setEducation}\n            />\n            <Grid item>\n              <ChipInput\n                className={classes.inputBox}\n                label=\"Skills\"\n                variant=\"outlined\"\n                helperText=\"Press enter to add skills\"\n                onChange={(chips) =>\n                  setSignupDetails({ ...signupDetails, skills: chips })\n                }\n              />\n            </Grid>\n            <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Resume (.pdf)\"\n                icon={<DescriptionIcon />}\n                // value={files.resume}\n                // onChange={(event) =>\n                //   setFiles({\n                //     ...files,\n                //     resume: event.target.files[0],\n                //   })\n                // }\n                uploadTo={apiList.uploadResume}\n                handleInput={handleInput}\n                identifier={\"resume\"}\n              />\n            </Grid>\n            <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Profile Photo (.jpg/.png)\"\n                icon={<FaceIcon />}\n                // value={files.profileImage}\n                // onChange={(event) =>\n                //   setFiles({\n                //     ...files,\n                //     profileImage: event.target.files[0],\n                //   })\n                // }\n                uploadTo={apiList.uploadProfileImage}\n                handleInput={handleInput}\n                identifier={\"profile\"}\n              />\n            </Grid>\n          </>\n        ) : (\n          <>\n            <Grid item style={{ width: \"100%\" }}>\n              <TextField\n                label=\"Bio (upto 250 words)\"\n                multiline\n                rows={8}\n                style={{ width: \"100%\" }}\n                variant=\"outlined\"\n                value={signupDetails.bio}\n                onChange={(event) => {\n                  if (\n                    event.target.value.split(\" \").filter(function (n) {\n                      return n != \"\";\n                    }).length <= 250\n                  ) {\n                    handleInput(\"bio\", event.target.value);\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <PhoneInput\n                country={\"in\"}\n                value={phone}\n                onChange={(phone) => setPhone(phone)}\n              />\n            </Grid>\n          </>\n        )}\n\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              signupDetails.type === \"applicant\"\n                ? handleLogin()\n                : handleLoginRecruiter();\n            }}\n            className={classes.submitButton}\n          >\n            Signup\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Login;\n\n// {/* <Grid item>\n//           <PasswordInput\n//             label=\"Re-enter Password\"\n//             value={signupDetails.tmpPassword}\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\n//             className={classes.inputBox}\n//             labelWidth={140}\n//             helperText={inputErrorHandler.tmpPassword.message}\n//             error={inputErrorHandler.tmpPassword.error}\n//             onBlur={(event) => {\n//               if (event.target.value !== signupDetails.password) {\n//                 handleInputError(\n//                   \"tmpPassword\",\n//                   true,\n//                   \"Passwords are not same.\"\n//                 );\n//               }\n//             }}\n//           />\n//         </Grid> */}\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Home.js",["263","264","265","266","267","268","269"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Posted By : {job.recruiter.name}</Grid>\n          <Grid item>Application Deadline : {deadline}</Grid>\n\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item xs={3}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.button}\n            onClick={() => {\n              setOpen(true);\n            }}\n            disabled={userType() === \"recruiter\"}\n          >\n            Apply\n          </Button>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Write SOP (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n != \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n        {/* <Grid item>\n          <Pagination count={10} color=\"primary\" />\n        </Grid> */}\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Home;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\Applications.js",["270","271","272","273","274","275","276","277","278"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{application.job.title}</Typography>\n          </Grid>\n          <Grid item>Posted By: {application.recruiter.name}</Grid>\n          <Grid item>Role : {application.job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {application.job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {application.job.duration !== 0\n              ? `${application.job.duration} month`\n              : `Flexible`}\n          </Grid>\n          <Grid item>\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>Joined On: {joinedOn.toLocaleDateString()}</Grid>\n          ) : null}\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Paper\n              className={classes.statusBlock}\n              style={{\n                background: colorSet[application.status],\n                color: \"#ffffff\",\n              }}\n            >\n              {application.status}\n            </Paper>\n          </Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  fetchRating();\n                  setOpen(true);\n                }}\n              >\n                Rate Job\n              </Button>\n            </Grid>\n          ) : null}\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h2\">Applications</Typography>\n      </Grid>\n      <Grid\n        container\n        item\n        xs\n        direction=\"column\"\n        style={{ width: \"100%\" }}\n        alignItems=\"stretch\"\n        justify=\"center\"\n      >\n        {applications.length > 0 ? (\n          applications.map((obj) => (\n            <Grid item>\n              <ApplicationTile application={obj} />\n            </Grid>\n          ))\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            No Applications Found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Applications;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\CreateJobs.js",["279","280"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst CreateJobs = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [jobDetails, setJobDetails] = useState({\n    title: \"\",\n    maxApplicants: 100,\n    maxPositions: 30,\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .substr(0, 16),\n    skillsets: [],\n    jobType: \"Full Time\",\n    duration: 0,\n    salary: 0,\n  });\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleUpdate = () => {\n    console.log(jobDetails);\n    axios\n      .post(apiList.jobs, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        setJobDetails({\n          title: \"\",\n          maxApplicants: 100,\n          maxPositions: 30,\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .substr(0, 16),\n          skillsets: [],\n          jobType: \"Full Time\",\n          duration: 0,\n          salary: 0,\n        });\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Add Job</Typography>\n        </Grid>\n        <Grid item container xs direction=\"column\" justify=\"center\">\n          <Grid item>\n            <Paper\n              style={{\n                padding: \"20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Title\"\n                    value={jobDetails.title}\n                    onChange={(event) =>\n                      handleInput(\"title\", event.target.value)\n                    }\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={jobDetails.skillsets}\n                    onAdd={(chip) =>\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: [...jobDetails.skillsets, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skillsets = jobDetails.skillsets;\n                      skillsets.splice(index, 1);\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: skillsets,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Job Type\"\n                    variant=\"outlined\"\n                    value={jobDetails.jobType}\n                    onChange={(event) => {\n                      handleInput(\"jobType\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    select\n                    label=\"Duration\"\n                    variant=\"outlined\"\n                    value={jobDetails.duration}\n                    onChange={(event) => {\n                      handleInput(\"duration\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value={0}>Flexible</MenuItem>\n                    <MenuItem value={1}>1 Month</MenuItem>\n                    <MenuItem value={2}>2 Months</MenuItem>\n                    <MenuItem value={3}>3 Months</MenuItem>\n                    <MenuItem value={4}>4 Months</MenuItem>\n                    <MenuItem value={5}>5 Months</MenuItem>\n                    <MenuItem value={6}>6 Months</MenuItem>\n                  </TextField>\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Salary\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.salary}\n                    onChange={(event) => {\n                      handleInput(\"salary\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 0 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Application Deadline\"\n                    type=\"datetime-local\"\n                    value={jobDetails.deadline}\n                    onChange={(event) => {\n                      handleInput(\"deadline\", event.target.value);\n                    }}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Maximum Number Of Applicants\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxApplicants}\n                    onChange={(event) => {\n                      handleInput(\"maxApplicants\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Positions Available\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxPositions}\n                    onChange={(event) => {\n                      handleInput(\"maxPositions\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n                onClick={() => handleUpdate()}\n              >\n                Create Job\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default CreateJobs;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\MessagePopup.js",["281"],"import { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst MessagePopup = (props) => {\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.setOpen(false);\n  };\n  return (\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MessagePopup;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\Profile.js",["282","283","284"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Profile</Typography>\n        </Grid>\n        <Grid item xs style={{ width: \"100%\" }}>\n          <Paper\n            style={{\n              padding: \"20px\",\n              outline: \"none\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              //   width: \"60%\",\n            }}\n          >\n            <Grid container direction=\"column\" alignItems=\"stretch\" spacing={3}>\n              <Grid item>\n                <TextField\n                  label=\"Name\"\n                  value={profileDetails.name}\n                  onChange={(event) => handleInput(\"name\", event.target.value)}\n                  className={classes.inputBox}\n                  variant=\"outlined\"\n                  fullWidth\n                  style={{ width: \"100%\" }}\n                />\n              </Grid>\n              <Grid item>\n                <TextField\n                  label=\"Bio (upto 250 words)\"\n                  multiline\n                  rows={8}\n                  style={{ width: \"100%\" }}\n                  variant=\"outlined\"\n                  value={profileDetails.bio}\n                  onChange={(event) => {\n                    if (\n                      event.target.value.split(\" \").filter(function (n) {\n                        return n != \"\";\n                      }).length <= 250\n                    ) {\n                      handleInput(\"bio\", event.target.value);\n                    }\n                  }}\n                />\n              </Grid>\n              <Grid\n                item\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <PhoneInput\n                  country={\"in\"}\n                  value={phone}\n                  onChange={(phone) => setPhone(phone)}\n                  style={{ width: \"auto\" }}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n              onClick={() => handleUpdate()}\n            >\n              Update Details\n            </Button>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\isAuth.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\MyJobs.js",["285","286","287","288","289","290"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">{job.title}</Typography>\n          </Grid>\n          <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid>\n          <Grid item>Role : {job.jobType}</Grid>\n          <Grid item>Salary : &#8377; {job.salary} per month</Grid>\n          <Grid item>\n            Duration :{\" \"}\n            {job.duration !== 0 ? `${job.duration} month` : `Flexible`}\n          </Grid>\n          <Grid item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          <Grid item>Number of Applicants: {job.maxApplicants}</Grid>\n          <Grid item>\n            Remaining Number of Positions:{\" \"}\n            {job.maxPositions - job.acceptedCandidates}\n          </Grid>\n          <Grid item>\n            {job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item xs>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => handleClick(`/job/applications/${job._id}`)}\n            >\n              View Applications\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpenUpdate(true);\n              }}\n              style={{\n                background: \"#FC7A1E\",\n                color: \"#fff\",\n              }}\n            >\n              Update Details\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Delete Job\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={3}\n            style={{ margin: \"10px\" }}\n          >\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid item xs>\n            <Typography variant=\"h2\">My Jobs</Typography>\n          </Grid>\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"500px\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} getData={getData} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\JobApplications.js",["291","292","293","294","295","296"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfApplication\"\n                    checked={searchOptions.sort.dateOfApplication.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfApplication\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfApplication\">\n                    <Typography>Date of Application</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfApplication.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfApplication: {\n                            ...searchOptions.sort.dateOfApplication,\n                            desc: !searchOptions.sort.dateOfApplication.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfApplication.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (\n      application.jobApplicant.resume &&\n      application.jobApplicant.resume !== \"\"\n    ) {\n      const address = `${server}${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  const buttonSet = {\n    applied: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"shortlisted\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"shortlisted\")}\n          >\n            Shortlist\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    shortlisted: (\n      <>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"accepted\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"accepted\")}\n          >\n            Accept\n          </Button>\n        </Grid>\n        <Grid item xs>\n          <Button\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n            onClick={() => updateStatus(\"rejected\")}\n          >\n            Reject\n          </Button>\n        </Grid>\n      </>\n    ),\n    rejected: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"rejected\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Rejected\n          </Paper>\n        </Grid>\n      </>\n    ),\n    accepted: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"accepted\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Accepted\n          </Paper>\n        </Grid>\n      </>\n    ),\n    cancelled: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"cancelled\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Cancelled\n          </Paper>\n        </Grid>\n      </>\n    ),\n    finished: (\n      <>\n        <Grid item xs>\n          <Paper\n            className={classes.statusBlock}\n            style={{\n              background: colorSet[\"finished\"],\n              color: \"#ffffff\",\n            }}\n          >\n            Finished\n          </Paper>\n        </Grid>\n      </>\n    ),\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            Education:{\" \"}\n            {application.jobApplicant.education\n              .map((edu) => {\n                return `${edu.institutionName} (${edu.startYear}-${\n                  edu.endYear ? edu.endYear : \"Ongoing\"\n                })`;\n              })\n              .join(\", \")}\n          </Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {buttonSet[application.status]}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            // onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst JobApplications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const { jobId } = useParams();\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    status: {\n      all: false,\n      applied: false,\n      shortlisted: false,\n    },\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      dateOfApplication: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n\n    if (searchOptions.status.rejected) {\n      searchParams = [...searchParams, `status=rejected`];\n    }\n    if (searchOptions.status.applied) {\n      searchParams = [...searchParams, `status=applied`];\n    }\n    if (searchOptions.status.shortlisted) {\n      searchParams = [...searchParams, `status=shortlisted`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}?jobId=${jobId}`;\n    if (queryString !== \"\") {\n      address = `${address}&${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // console.log(err.response.data);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Applications</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default JobApplications;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\component\\recruiter\\AcceptedApplicants.js",["297","298","299","300","301","302","303","304","305"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          {/* <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid> */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"jobTitle\"\n                    checked={searchOptions.sort[\"job.title\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"jobTitle\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"jobTitle\">\n                    <Typography>Job Title</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"job.title\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            desc: !searchOptions.sort[\"job.title\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"job.title\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfJoining\"\n                    checked={searchOptions.sort.dateOfJoining.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfJoining\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfJoining\">\n                    <Typography>Date of Joining</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfJoining.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            desc: !searchOptions.sort.dateOfJoining.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfJoining.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [openEndJob, setOpenEndJob] = useState(false);\n  const [rating, setRating] = useState(application.jobApplicant.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, applicantId: application.jobApplicant.userId },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseEndJob = () => {\n    setOpenEndJob(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (\n      application.jobApplicant.resume &&\n      application.jobApplicant.resume !== \"\"\n    ) {\n      const address = `${server}${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], { type: \"application/pdf\" });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleCloseEndJob();\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n        handleCloseEndJob();\n      });\n  };\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${server}${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Job Title: {application.job.title}</Grid>\n          <Grid item>Role: {application.job.jobType}</Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              onClick={() => getResume()}\n            >\n              Download Resume\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {/* {buttonSet[application.status]} */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              style={{\n                background: \"#09BC8A\",\n              }}\n              onClick={() => {\n                setOpenEndJob(true);\n              }}\n            >\n              End Job\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Rate Applicant\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openEndJob}\n        onClose={handleCloseEndJob}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => {\n                  updateStatus(\"finished\");\n                }}\n              >\n                Yes\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseEndJob()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst AcceptedApplicants = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      \"job.title\": {\n        status: false,\n        desc: false,\n      },\n      dateOfJoining: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    searchParams = [...searchParams, `status=accepted`];\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}`;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // console.log(err.response.data);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Employees</Typography>\n        </Grid>\n        <Grid item>\n          <IconButton onClick={() => setFilterOpen(true)}>\n            <FilterListIcon />\n          </IconButton>\n        </Grid>\n        <Grid\n          container\n          item\n          xs\n          direction=\"column\"\n          style={{ width: \"100%\" }}\n          alignItems=\"stretch\"\n          justify=\"center\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default AcceptedApplicants;\n","C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\apiList.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\PasswordInput.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\EmailInput.js",[],"C:\\Users\\acer\\Downloads\\Mern-job-portal-main\\Mern-job-portal-main\\client\\src\\lib\\FileUploadInput.js",[],["306","307"],{"ruleId":"308","severity":1,"message":"309","line":19,"column":8,"nodeType":"310","messageId":"311","endLine":19,"endColumn":14},{"ruleId":"312","severity":1,"message":"313","line":16,"column":6,"nodeType":"314","endLine":16,"endColumn":8,"suggestions":"315"},{"ruleId":"308","severity":1,"message":"316","line":4,"column":3,"nodeType":"310","messageId":"311","endLine":4,"endColumn":12},{"ruleId":"308","severity":1,"message":"317","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":8},{"ruleId":"318","severity":1,"message":"319","line":459,"column":32,"nodeType":"320","messageId":"321","endLine":459,"endColumn":34},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"323","line":20,"column":8,"nodeType":"310","messageId":"311","endLine":20,"endColumn":18},{"ruleId":"318","severity":1,"message":"319","line":164,"column":28,"nodeType":"320","messageId":"321","endLine":164,"endColumn":30},{"ruleId":"312","severity":1,"message":"324","line":547,"column":6,"nodeType":"314","endLine":547,"endColumn":8,"suggestions":"325"},{"ruleId":"318","severity":1,"message":"319","line":563,"column":33,"nodeType":"320","messageId":"321","endLine":563,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":569,"column":33,"nodeType":"320","messageId":"321","endLine":569,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":575,"column":32,"nodeType":"320","messageId":"321","endLine":575,"endColumn":34},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"308","severity":1,"message":"327","line":109,"column":10,"nodeType":"310","messageId":"311","endLine":109,"endColumn":18},{"ruleId":"308","severity":1,"message":"328","line":109,"column":20,"nodeType":"310","messageId":"311","endLine":109,"endColumn":31},{"ruleId":"308","severity":1,"message":"329","line":110,"column":10,"nodeType":"310","messageId":"311","endLine":110,"endColumn":14},{"ruleId":"312","severity":1,"message":"324","line":137,"column":6,"nodeType":"314","endLine":137,"endColumn":8,"suggestions":"330"},{"ruleId":"308","severity":1,"message":"331","line":169,"column":9,"nodeType":"310","messageId":"311","endLine":169,"endColumn":20},{"ruleId":"308","severity":1,"message":"332","line":173,"column":9,"nodeType":"310","messageId":"311","endLine":173,"endColumn":20},{"ruleId":"308","severity":1,"message":"333","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":13},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"336","line":14,"column":3,"nodeType":"310","messageId":"311","endLine":14,"endColumn":19},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"308","severity":1,"message":"338","line":17,"column":3,"nodeType":"310","messageId":"311","endLine":17,"endColumn":11},{"ruleId":"312","severity":1,"message":"324","line":229,"column":6,"nodeType":"314","endLine":229,"endColumn":8,"suggestions":"339"},{"ruleId":"308","severity":1,"message":"340","line":1,"column":22,"nodeType":"310","messageId":"311","endLine":1,"endColumn":31},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"308","severity":1,"message":"341","line":1,"column":20,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"323","line":21,"column":8,"nodeType":"310","messageId":"311","endLine":21,"endColumn":18},{"ruleId":"312","severity":1,"message":"324","line":714,"column":6,"nodeType":"314","endLine":714,"endColumn":8,"suggestions":"342"},{"ruleId":"318","severity":1,"message":"319","line":730,"column":33,"nodeType":"320","messageId":"321","endLine":730,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":736,"column":33,"nodeType":"320","messageId":"321","endLine":736,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":742,"column":32,"nodeType":"320","messageId":"321","endLine":742,"endColumn":34},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"336","line":14,"column":3,"nodeType":"310","messageId":"311","endLine":14,"endColumn":19},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"308","severity":1,"message":"343","line":20,"column":10,"nodeType":"310","messageId":"311","endLine":20,"endColumn":19},{"ruleId":"308","severity":1,"message":"344","line":450,"column":9,"nodeType":"310","messageId":"311","endLine":450,"endColumn":17},{"ruleId":"312","severity":1,"message":"324","line":717,"column":6,"nodeType":"314","endLine":717,"endColumn":8,"suggestions":"345"},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"312","severity":1,"message":"324","line":53,"column":6,"nodeType":"314","endLine":53,"endColumn":8,"suggestions":"346"},{"ruleId":"318","severity":1,"message":"319","line":164,"column":34,"nodeType":"320","messageId":"321","endLine":164,"endColumn":36},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"312","severity":1,"message":"324","line":668,"column":6,"nodeType":"314","endLine":668,"endColumn":8,"suggestions":"347"},{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","replacedBy":"351"},{"ruleId":"308","severity":1,"message":"309","line":19,"column":8,"nodeType":"310","messageId":"311","endLine":19,"endColumn":14},{"ruleId":"312","severity":1,"message":"313","line":16,"column":6,"nodeType":"314","endLine":16,"endColumn":8,"suggestions":"352"},{"ruleId":"308","severity":1,"message":"316","line":4,"column":3,"nodeType":"310","messageId":"311","endLine":4,"endColumn":12},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"308","severity":1,"message":"327","line":109,"column":10,"nodeType":"310","messageId":"311","endLine":109,"endColumn":18},{"ruleId":"308","severity":1,"message":"328","line":109,"column":20,"nodeType":"310","messageId":"311","endLine":109,"endColumn":31},{"ruleId":"308","severity":1,"message":"329","line":110,"column":10,"nodeType":"310","messageId":"311","endLine":110,"endColumn":14},{"ruleId":"312","severity":1,"message":"324","line":137,"column":6,"nodeType":"314","endLine":137,"endColumn":8,"suggestions":"353"},{"ruleId":"308","severity":1,"message":"331","line":169,"column":9,"nodeType":"310","messageId":"311","endLine":169,"endColumn":20},{"ruleId":"308","severity":1,"message":"332","line":173,"column":9,"nodeType":"310","messageId":"311","endLine":173,"endColumn":20},{"ruleId":"308","severity":1,"message":"317","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":8},{"ruleId":"318","severity":1,"message":"319","line":459,"column":32,"nodeType":"320","messageId":"321","endLine":459,"endColumn":34},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"323","line":20,"column":8,"nodeType":"310","messageId":"311","endLine":20,"endColumn":18},{"ruleId":"318","severity":1,"message":"319","line":164,"column":28,"nodeType":"320","messageId":"321","endLine":164,"endColumn":30},{"ruleId":"312","severity":1,"message":"324","line":547,"column":6,"nodeType":"314","endLine":547,"endColumn":8,"suggestions":"354"},{"ruleId":"318","severity":1,"message":"319","line":563,"column":33,"nodeType":"320","messageId":"321","endLine":563,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":569,"column":33,"nodeType":"320","messageId":"321","endLine":569,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":575,"column":32,"nodeType":"320","messageId":"321","endLine":575,"endColumn":34},{"ruleId":"308","severity":1,"message":"333","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":13},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"336","line":14,"column":3,"nodeType":"310","messageId":"311","endLine":14,"endColumn":19},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"308","severity":1,"message":"338","line":17,"column":3,"nodeType":"310","messageId":"311","endLine":17,"endColumn":11},{"ruleId":"312","severity":1,"message":"324","line":229,"column":6,"nodeType":"314","endLine":229,"endColumn":8,"suggestions":"355"},{"ruleId":"308","severity":1,"message":"340","line":1,"column":22,"nodeType":"310","messageId":"311","endLine":1,"endColumn":31},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"308","severity":1,"message":"341","line":1,"column":20,"nodeType":"310","messageId":"311","endLine":1,"endColumn":25},{"ruleId":"308","severity":1,"message":"326","line":6,"column":3,"nodeType":"310","messageId":"311","endLine":6,"endColumn":8},{"ruleId":"312","severity":1,"message":"324","line":53,"column":6,"nodeType":"314","endLine":53,"endColumn":8,"suggestions":"356"},{"ruleId":"318","severity":1,"message":"319","line":164,"column":34,"nodeType":"320","messageId":"321","endLine":164,"endColumn":36},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"323","line":21,"column":8,"nodeType":"310","messageId":"311","endLine":21,"endColumn":18},{"ruleId":"312","severity":1,"message":"324","line":714,"column":6,"nodeType":"314","endLine":714,"endColumn":8,"suggestions":"357"},{"ruleId":"318","severity":1,"message":"319","line":730,"column":33,"nodeType":"320","messageId":"321","endLine":730,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":736,"column":33,"nodeType":"320","messageId":"321","endLine":736,"endColumn":35},{"ruleId":"318","severity":1,"message":"319","line":742,"column":32,"nodeType":"320","messageId":"321","endLine":742,"endColumn":34},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"312","severity":1,"message":"324","line":668,"column":6,"nodeType":"314","endLine":668,"endColumn":8,"suggestions":"358"},{"ruleId":"308","severity":1,"message":"334","line":7,"column":3,"nodeType":"310","messageId":"311","endLine":7,"endColumn":17},{"ruleId":"308","severity":1,"message":"316","line":10,"column":3,"nodeType":"310","messageId":"311","endLine":10,"endColumn":12},{"ruleId":"308","severity":1,"message":"335","line":13,"column":3,"nodeType":"310","messageId":"311","endLine":13,"endColumn":9},{"ruleId":"308","severity":1,"message":"336","line":14,"column":3,"nodeType":"310","messageId":"311","endLine":14,"endColumn":19},{"ruleId":"308","severity":1,"message":"322","line":15,"column":3,"nodeType":"310","messageId":"311","endLine":15,"endColumn":12},{"ruleId":"308","severity":1,"message":"337","line":16,"column":3,"nodeType":"310","messageId":"311","endLine":16,"endColumn":11},{"ruleId":"308","severity":1,"message":"343","line":20,"column":10,"nodeType":"310","messageId":"311","endLine":20,"endColumn":19},{"ruleId":"308","severity":1,"message":"344","line":450,"column":9,"nodeType":"310","messageId":"311","endLine":450,"endColumn":17},{"ruleId":"312","severity":1,"message":"324","line":717,"column":6,"nodeType":"314","endLine":717,"endColumn":8,"suggestions":"359"},{"ruleId":"348","replacedBy":"360"},{"ruleId":"350","replacedBy":"361"},"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["362"],"'TextField' is defined but never used.","'Input' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'FormGroup' is defined but never used.","'Pagination' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["363"],"'Modal' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'open' is assigned a value but never used.",["364"],"'handleClose' is assigned a value but never used.","'editDetails' is assigned a value but never used.","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.",["365"],"'useEffect' is defined but never used.","'Slide' is defined but never used.",["366"],"'useParams' is defined but never used.","'colorSet' is assigned a value but never used.",["367"],["368"],["369"],"no-native-reassign",["370"],"no-negated-in-lhs",["371"],["372"],["373"],["374"],["375"],["376"],["377"],["378"],["379"],["370"],["371"],{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"382","fix":"384"},{"desc":"382","fix":"385"},{"desc":"382","fix":"386"},{"desc":"382","fix":"387"},{"desc":"382","fix":"388"},{"desc":"382","fix":"389"},"no-global-assign","no-unsafe-negation",{"desc":"380","fix":"390"},{"desc":"382","fix":"391"},{"desc":"382","fix":"392"},{"desc":"382","fix":"393"},{"desc":"382","fix":"394"},{"desc":"382","fix":"395"},{"desc":"382","fix":"396"},{"desc":"382","fix":"397"},"Update the dependencies array to be: [setPopup]",{"range":"398","text":"399"},"Update the dependencies array to be: [getData]",{"range":"400","text":"401"},{"range":"402","text":"401"},{"range":"403","text":"401"},{"range":"404","text":"401"},{"range":"405","text":"401"},{"range":"406","text":"401"},{"range":"407","text":"401"},{"range":"408","text":"399"},{"range":"409","text":"401"},{"range":"410","text":"401"},{"range":"411","text":"401"},{"range":"412","text":"401"},{"range":"413","text":"401"},{"range":"414","text":"401"},{"range":"415","text":"401"},[437,439],"[setPopup]",[17123,17125],"[getData]",[3540,3542],[6215,6217],[22167,22169],[22424,22426],[1091,1093],[19960,19962],[422,424],[3404,3406],[16577,16579],[5987,5989],[1039,1041],[21454,21456],[19293,19295],[21708,21710]]